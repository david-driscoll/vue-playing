{"version":3,"sources":["webpack:///webpack/bootstrap 2771c51bf6b650c53347","webpack:///external \"domain\"","webpack:///./client/server.ts","webpack:///./node_modules/aspnet-prerendering/index.js","webpack:///./node_modules/aspnet-prerendering/Prerendering.js","webpack:///external \"url\"","webpack:///./node_modules/domain-task/main.js","webpack:///./node_modules/domain-context/lib/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;AC7DA,mC;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC,KAAK;AACL,CAAC;;;;;;;;;;;;;;ACXD;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;;;;;;;;;;;;;ACLA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;AChGA,gC;;;;;;;;;;;;ACAA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1EA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA","file":"./dist/server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2771c51bf6b650c53347","module.exports = require(\"domain\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"domain\"\n// module id = 0\n// module chunks = 1","\"use strict\";\r\nexports.__esModule = true;\r\nvar aspnet_prerendering_1 = require(\"aspnet-prerendering\");\r\nmodule.exports = aspnet_prerendering_1.createServerRenderer(function (params) {\r\n    return new Promise(function (resolve) {\r\n        var result = '<h1>Hello world!</h1>'\r\n            + '<p>Current time in Node is: ' + new Date() + '</p>'\r\n            + '<p>Request path is: ' + params.location.path + '</p>'\r\n            + '<p>Absolute URL is: ' + params.absoluteUrl + '</p>';\r\n        resolve({ html: result });\r\n    });\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/server.ts\n// module id = 12\n// module chunks = 1","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./Prerendering\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/aspnet-prerendering/index.js\n// module id = 14\n// module chunks = 1","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar url = require(\"url\");\r\nvar domain = require(\"domain\");\r\nvar main_1 = require(\"domain-task/main\");\r\nvar defaultTimeoutMilliseconds = 30 * 1000;\r\nfunction createServerRenderer(bootFunc) {\r\n    var resultFunc = function (callback, applicationBasePath, bootModule, absoluteRequestUrl, requestPathAndQuery, customDataParameter, overrideTimeoutMilliseconds, requestPathBase) {\r\n        // Prepare a promise that will represent the completion of all domain tasks in this execution context.\r\n        // The boot code will wait for this before performing its final render.\r\n        var domainTaskCompletionPromiseResolve;\r\n        var domainTaskCompletionPromise = new Promise(function (resolve, reject) {\r\n            domainTaskCompletionPromiseResolve = resolve;\r\n        });\r\n        var parsedAbsoluteRequestUrl = url.parse(absoluteRequestUrl);\r\n        var params = {\r\n            // It's helpful for boot funcs to receive the query as a key-value object, so parse it here\r\n            // e.g., react-redux-router requires location.query to be a key-value object for consistency with client-side behaviour\r\n            location: url.parse(requestPathAndQuery, /* parseQueryString */ true),\r\n            origin: parsedAbsoluteRequestUrl.protocol + '//' + parsedAbsoluteRequestUrl.host,\r\n            url: requestPathAndQuery,\r\n            baseUrl: (requestPathBase || '') + '/',\r\n            absoluteUrl: absoluteRequestUrl,\r\n            domainTasks: domainTaskCompletionPromise,\r\n            data: customDataParameter\r\n        };\r\n        var absoluteBaseUrl = params.origin + params.baseUrl; // Should be same value as page's <base href>\r\n        // Open a new domain that can track all the async tasks involved in the app's execution\r\n        main_1.run(/* code to run */ function () {\r\n            // Workaround for Node bug where native Promise continuations lose their domain context\r\n            // (https://github.com/nodejs/node-v0.x-archive/issues/8648)\r\n            // The domain.active property is set by the domain-context module\r\n            bindPromiseContinuationsToDomain(domainTaskCompletionPromise, domain['active']);\r\n            // Make the base URL available to the 'domain-tasks/fetch' helper within this execution context\r\n            main_1.baseUrl(absoluteBaseUrl);\r\n            // Begin rendering, and apply a timeout\r\n            var bootFuncPromise = bootFunc(params);\r\n            if (!bootFuncPromise || typeof bootFuncPromise.then !== 'function') {\r\n                callback(\"Prerendering failed because the boot function in \" + bootModule.moduleName + \" did not return a promise.\", null);\r\n                return;\r\n            }\r\n            var timeoutMilliseconds = overrideTimeoutMilliseconds || defaultTimeoutMilliseconds; // e.g., pass -1 to override as 'never time out'\r\n            var bootFuncPromiseWithTimeout = timeoutMilliseconds > 0\r\n                ? wrapWithTimeout(bootFuncPromise, timeoutMilliseconds, \"Prerendering timed out after \" + timeoutMilliseconds + \"ms because the boot function in '\" + bootModule.moduleName + \"' \"\r\n                    + 'returned a promise that did not resolve or reject. Make sure that your boot function always resolves or '\r\n                    + 'rejects its promise. You can change the timeout value using the \\'asp-prerender-timeout\\' tag helper.')\r\n                : bootFuncPromise;\r\n            // Actually perform the rendering\r\n            bootFuncPromiseWithTimeout.then(function (successResult) {\r\n                callback(null, successResult);\r\n            }, function (error) {\r\n                callback(error, null);\r\n            });\r\n        }, /* completion callback */ function (/* completion callback */ errorOrNothing) {\r\n            if (errorOrNothing) {\r\n                callback(errorOrNothing, null);\r\n            }\r\n            else {\r\n                // There are no more ongoing domain tasks (typically data access operations), so we can resolve\r\n                // the domain tasks promise which notifies the boot code that it can do its final render.\r\n                domainTaskCompletionPromiseResolve();\r\n            }\r\n        });\r\n    };\r\n    // Indicate to the prerendering code bundled into Microsoft.AspNetCore.SpaServices that this is a serverside rendering\r\n    // function, so it can be invoked directly. This flag exists only so that, in its absence, we can run some different\r\n    // backward-compatibility logic.\r\n    resultFunc['isServerRenderer'] = true;\r\n    return resultFunc;\r\n}\r\nexports.createServerRenderer = createServerRenderer;\r\nfunction wrapWithTimeout(promise, timeoutMilliseconds, timeoutRejectionValue) {\r\n    return new Promise(function (resolve, reject) {\r\n        var timeoutTimer = setTimeout(function () {\r\n            reject(timeoutRejectionValue);\r\n        }, timeoutMilliseconds);\r\n        promise.then(function (resolvedValue) {\r\n            clearTimeout(timeoutTimer);\r\n            resolve(resolvedValue);\r\n        }, function (rejectedValue) {\r\n            clearTimeout(timeoutTimer);\r\n            reject(rejectedValue);\r\n        });\r\n    });\r\n}\r\nfunction bindPromiseContinuationsToDomain(promise, domainInstance) {\r\n    var originalThen = promise.then;\r\n    promise.then = (function then(resolve, reject) {\r\n        if (typeof resolve === 'function') {\r\n            resolve = domainInstance.bind(resolve);\r\n        }\r\n        if (typeof reject === 'function') {\r\n            reject = domainInstance.bind(reject);\r\n        }\r\n        return originalThen.call(this, resolve, reject);\r\n    });\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/aspnet-prerendering/Prerendering.js\n// module id = 15\n// module chunks = 1","module.exports = require(\"url\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"url\"\n// module id = 16\n// module chunks = 1","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar domain = require(\"domain\");\r\nvar domainContext = require(\"domain-context\");\r\n// Not using symbols, because this may need to run in a version of Node.js that doesn't support them\r\nvar domainTasksStateKey = '__DOMAIN_TASKS';\r\nvar domainTaskBaseUrlStateKey = '__DOMAIN_TASK_INTERNAL_FETCH_BASEURL__DO_NOT_REFERENCE_THIS__';\r\nvar noDomainBaseUrl;\r\nfunction addTask(task) {\r\n    if (task && domain.active) {\r\n        var state_1 = domainContext.get(domainTasksStateKey);\r\n        if (state_1) {\r\n            state_1.numRemainingTasks++;\r\n            task.then(function () {\r\n                // The application may have other listeners chained to this promise *after*\r\n                // this listener, which may in turn register further tasks. Since we don't \r\n                // want the combined task to complete until all the handlers for child tasks\r\n                // have finished, delay the response to give time for more tasks to be added\r\n                // synchronously.\r\n                setTimeout(function () {\r\n                    state_1.numRemainingTasks--;\r\n                    if (state_1.numRemainingTasks === 0 && !state_1.hasIssuedSuccessCallback) {\r\n                        state_1.hasIssuedSuccessCallback = true;\r\n                        setTimeout(function () {\r\n                            state_1.completionCallback(/* error */ null);\r\n                        }, 0);\r\n                    }\r\n                }, 0);\r\n            }, function (error) {\r\n                state_1.completionCallback(error);\r\n            });\r\n        }\r\n    }\r\n}\r\nexports.addTask = addTask;\r\nfunction run(codeToRun, completionCallback) {\r\n    var synchronousResult;\r\n    domainContext.runInNewDomain(function () {\r\n        var state = {\r\n            numRemainingTasks: 0,\r\n            hasIssuedSuccessCallback: false,\r\n            completionCallback: domain.active.bind(completionCallback)\r\n        };\r\n        try {\r\n            domainContext.set(domainTasksStateKey, state);\r\n            synchronousResult = codeToRun();\r\n            // If no tasks were registered synchronously, then we're done already\r\n            if (state.numRemainingTasks === 0 && !state.hasIssuedSuccessCallback) {\r\n                state.hasIssuedSuccessCallback = true;\r\n                setTimeout(function () {\r\n                    state.completionCallback(/* error */ null);\r\n                }, 0);\r\n            }\r\n        }\r\n        catch (ex) {\r\n            state.completionCallback(ex);\r\n        }\r\n    });\r\n    return synchronousResult;\r\n}\r\nexports.run = run;\r\nfunction baseUrl(url) {\r\n    if (url) {\r\n        if (domain.active) {\r\n            // There's an active domain (e.g., in Node.js), so associate the base URL with it\r\n            domainContext.set(domainTaskBaseUrlStateKey, url);\r\n        }\r\n        else {\r\n            // There's no active domain (e.g., in browser), so there's just one shared base URL\r\n            noDomainBaseUrl = url;\r\n        }\r\n    }\r\n    return domain.active ? domainContext.get(domainTaskBaseUrlStateKey) : noDomainBaseUrl;\r\n}\r\nexports.baseUrl = baseUrl;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/domain-task/main.js\n// module id = 17\n// module chunks = 1","// Generated by CoffeeScript 1.6.2\nvar domain;\n\ndomain = require('domain');\n\nexports.context = function(context, currentDomain) {\n  if (currentDomain == null) {\n    currentDomain = domain.active;\n  }\n  if (currentDomain == null) {\n    throw new Error('no active domain');\n  }\n  return currentDomain.__context__ = context != null ? context() : {};\n};\n\nexports.cleanup = function(cleanup, context, currentDomain) {\n  if (context == null) {\n    context = null;\n  }\n  if (currentDomain == null) {\n    currentDomain = domain.active;\n  }\n  context = context || currentDomain.__context__;\n  if ((cleanup != null) && (context != null)) {\n    cleanup(context);\n  }\n  if (currentDomain != null) {\n    return currentDomain.__context__ = null;\n  }\n};\n\nexports.onError = function(err, onError, context, currentDomain) {\n  if (context == null) {\n    context = null;\n  }\n  if (currentDomain == null) {\n    currentDomain = domain.active;\n  }\n  context = context || currentDomain.__context__;\n  if (onError != null) {\n    onError(err, context);\n  }\n  return currentDomain.__context__ = null;\n};\n\nexports.get = function(key, currentDomain) {\n  if (currentDomain == null) {\n    currentDomain = domain.active;\n  }\n  if (currentDomain == null) {\n    throw new Error('no active domain');\n  }\n  return currentDomain.__context__[key];\n};\n\nexports.set = function(key, value, currentDomain) {\n  if (currentDomain == null) {\n    currentDomain = domain.active;\n  }\n  if (currentDomain == null) {\n    throw new Error('no active domain');\n  }\n  return currentDomain.__context__[key] = value;\n};\n\nexports.run = function(options, func) {\n  var cleanup, context, currentDomain, err, onError;\n\n  if (!func) {\n    func = options;\n    options = {};\n  }\n  context = options.context, cleanup = options.cleanup, onError = options.onError;\n  currentDomain = options.domain || domain.active;\n  if (!currentDomain) {\n    throw new Error('no active domain');\n  }\n  currentDomain.on('dispose', function() {\n    return exports.cleanup(cleanup, null, currentDomain);\n  });\n  currentDomain.on('error', function(err) {\n    if (onError != null) {\n      return exports.onError(err, onError, null, currentDomain);\n    } else {\n      return exports.cleanup(cleanup, null, currentDomain);\n    }\n  });\n  exports.context(context, currentDomain);\n  try {\n    currentDomain.bind(func, true)();\n  } catch (_error) {\n    err = _error;\n    currentDomain.emit('error', err);\n  }\n  return currentDomain;\n};\n\nexports.runInNewDomain = function(options, func) {\n  var currentDomain;\n\n  if (!func) {\n    func = options;\n    options = {};\n  }\n  currentDomain = domain.active;\n  options.domain = domain.create();\n  if (!options.detach && currentDomain) {\n    currentDomain.add(options.domain);\n    options.domain.on('error', function(err) {\n      return currentDomain.emit('error', err);\n    });\n    currentDomain.on('dispose', function() {\n      return options.domain.dispose();\n    });\n  }\n  return exports.run(options, func);\n};\n\nexports.middleware = function(context, cleanup) {\n  return function(req, res, next) {\n    var currentDomain, _ref;\n\n    if (typeof context !== 'function') {\n      _ref = context, context = _ref.context, cleanup = _ref.cleanup;\n    }\n    currentDomain = domain.active;\n    exports.context(context, currentDomain);\n    res.on('finish', function() {\n      return exports.cleanup(cleanup, null, currentDomain);\n    });\n    req.__context__ = currentDomain.__context__;\n    return next();\n  };\n};\n\nexports.middlewareOnError = function(onError) {\n  return function(err, req, res, next) {\n    if (typeof onError !== 'function') {\n      onError = onError.onError;\n    }\n    if (onError != null) {\n      exports.onError(err, onError, req.__context__);\n    } else {\n      exports.cleanup(onError, req.__context__);\n    }\n    req.__context__ = null;\n    return next(err);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/domain-context/lib/index.js\n// module id = 18\n// module chunks = 1"],"sourceRoot":""}